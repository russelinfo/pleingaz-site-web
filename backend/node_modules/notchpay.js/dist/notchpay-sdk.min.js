!function(e,s){"object"==typeof exports&&"object"==typeof module?module.exports=s():"function"==typeof define&&define.amd?define([],s):"object"==typeof exports?exports.NotchPay=s():e.NotchPay=s()}(this,(()=>(()=>{"use strict";var __webpack_modules__={90:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function validateInitializePaymentFields({currency:currency,amount:amount,email:email,phone:phone,description:description,name:name,callback:callback,shipping:shipping,address:address,customer_meta:customer_meta,items:items,reference:reference,locked_country:locked_country,locked_currency:locked_currency}){const requiredFields=["currency","amount"],missingFields=requiredFields.filter((field=>!eval(field)));return email||phone||missingFields.push(["phone when email is not present","email when phone is not present","customer_id when phone and email are not present"]),missingFields.length>0?{success:!1,message:"The following fields are required : "+missingFields}:{success:!0}}function validateReferencePaymentField(reference){const requiredFields=["reference"],missingFields=requiredFields.filter((field=>!eval(field)));return missingFields.length>0?{success:!1,message:"The following params are required : "+missingFields}:{success:!0}}function validateCompletePaymentField(e,{channel:s,data:t}){if(!validateReferencePaymentField(e).success)return{success:!1,message:"The reference field is required"};if("cm.mtn"===s||"cm.orange"===s||"cm.mobile"===s){if(!t.phone)return{success:!1,message:"The phone field is required for the "+s+" channel"}}else if("paypal"===s){if(!t.email)return{success:!1,message:"The email field is required for the PayPal channel"}}else{if("card"!==s)return{success:!1,message:"Channel not supported. Supported values : cm.mtn, cm.orange, cm.mobile, paypal, card"};{const e=["name","card_number","exp","cvc"].filter((e=>!t[e]));if(e.length>0)return{success:!1,message:"The following fields are required for the Card channel: "+e.join(", ")}}}return{success:!0}}__webpack_require__.d(__webpack_exports__,{AU:()=>validateReferencePaymentField,Sp:()=>validateCompletePaymentField,wD:()=>validateInitializePaymentFields})}},__webpack_module_cache__={};function __webpack_require__(e){var s=__webpack_module_cache__[e];if(void 0!==s)return s.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,s)=>{for(var t in s)__webpack_require__.o(s,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:s[t]})},__webpack_require__.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s);var __webpack_exports__={};return(()=>{__webpack_require__.d(__webpack_exports__,{default:()=>u,K:()=>i});var e=__webpack_require__(90);const s=async function({path:e=null,method:s="GET",body:t={}}){const a={method:s,headers:{"Content-Type":"application/json",Authorization:i.publicKey},body:"GET"==s||"HEAD"==s?null:JSON.stringify(t)};return await window.fetch("https://api.notchpay.co"+e,a)},t="/payments";var a=null,r=!0,n=null,c=null;const o={payments:{async initializePayment({currency:o,amount:u,email:d,description:p,phone:l,name:_,callback:m,shipping:h,address:f,customer_meta:b,items:g,reference:y,locked_country:w,locked_currency:k}){const q={reference:y,email:d,currency:o,amount:u,phone:l,description:p,name:_,callback:m,shipping:h,address:f,customer_meta:b,items:g,locked_country:w,locked_currency:k};if((0,e.wD)(q).success)return i.debug,await s({path:t+"/initialize",method:"POST",body:q}).then((e=>(c=e,e.ok||(r=!1),e.json()))).then((e=>{i.debug,n=e})).catch((e=>(a=e,i.debug,i.formatedResponse?{status:0,message:"An error has occurred on our side; please contact technical support.",data:a}:a))),i.formatedResponse?{status:parseInt(c.status),message:r?"success":"error",data:n}:n;i.debug},async verifyAndFetchPayment(o){if((0,e.AU)(o).success)return i.debug,await s({path:t+"/"+o,method:"GET"}).then((e=>(c=e,e.ok||(r=!1),e.json()))).then((e=>{i.debug,n=e})).catch((e=>(a=e,i.debug,i.formatedResponse?{status:0,message:"An error has occurred on our side; please contact technical support.",data:a}:a))),i.formatedResponse?{status:parseInt(c.status),message:r?"success":"error",data:n}:n;i.debug},async completePayment(o,{channel:u,data:d}){const p={channel:u,data:d};if((0,e.Sp)(o,p).success)return i.debug,await s({path:t+"/"+o,method:"PUT",body:p}).then((e=>(c=e,e.ok||(r=!1),e.json()))).then((e=>{i.debug,n=e})).catch((e=>(a=e,i.debug,i.formatedResponse?{status:0,message:"An error has occurred on our side; please contact technical support.",data:a}:a))),i.formatedResponse?{status:parseInt(c.status),message:r?"success":"error",data:n}:n;i.debug},async listPayments({perpage:e,page:o}){return i.debug,await s({path:t+""+(e?"?perpage="+e+(o?"&page="+o:""):o?"?page="+o:""),method:"GET"}).then((e=>(c=e,e.ok||(r=!1),e.json()))).then((e=>{i.debug,n=e})).catch((e=>(a=e,i.debug,i.formatedResponse?{status:0,message:"An error has occurred on our side; please contact technical support.",data:a}:a))),i.formatedResponse?{status:parseInt(c.status),message:r?"success":"error",data:n}:n},async cancelPayment(o){if((0,e.AU)(o).success)return i.debug,await s({path:t+"/"+o,method:"DELETE"}).then((e=>(c=e,e.ok||(r=!1),e.json()))).then((e=>{i.debug,n=e})).catch((e=>(a=e,i.debug,i.formatedResponse?{status:0,message:"An error has occurred on our side; please contact technical support.",data:a}:a))),i.formatedResponse?{status:parseInt(c.status),message:r?"success":"error",data:n}:n;i.debug}},transferts:()=>{}};const i={publicKey:null,formatedResponse:null,debug:null},u=(e,s={})=>{if(void 0===e||"string"!=typeof e)throw new Error("Notch Pay -> The public key is required to initiate payments.");const{debug:t=!1,formatedResponse:a=!1}=s;return i.publicKey=e,i.debug=t,i.formatedResponse=a,o}})(),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));